// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: accountsvc.proto

package accountsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountSvcClient is the client API for AccountSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountSvcClient interface {
	GetByAccount(ctx context.Context, in *GetByAccountReq, opts ...grpc.CallOption) (*GetByAccountResp, error)
	GetById(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*GetByIdResp, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
}

type accountSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountSvcClient(cc grpc.ClientConnInterface) AccountSvcClient {
	return &accountSvcClient{cc}
}

func (c *accountSvcClient) GetByAccount(ctx context.Context, in *GetByAccountReq, opts ...grpc.CallOption) (*GetByAccountResp, error) {
	out := new(GetByAccountResp)
	err := c.cc.Invoke(ctx, "/accountsvc.AccountSvc/GetByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) GetById(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*GetByIdResp, error) {
	out := new(GetByIdResp)
	err := c.cc.Invoke(ctx, "/accountsvc.AccountSvc/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, "/accountsvc.AccountSvc/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/accountsvc.AccountSvc/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, "/accountsvc.AccountSvc/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountSvcServer is the server API for AccountSvc service.
// All implementations must embed UnimplementedAccountSvcServer
// for forward compatibility
type AccountSvcServer interface {
	GetByAccount(context.Context, *GetByAccountReq) (*GetByAccountResp, error)
	GetById(context.Context, *GetByIdReq) (*GetByIdResp, error)
	Create(context.Context, *CreateReq) (*CreateResp, error)
	Update(context.Context, *UpdateReq) (*UpdateResp, error)
	Delete(context.Context, *DeleteReq) (*DeleteResp, error)
	mustEmbedUnimplementedAccountSvcServer()
}

// UnimplementedAccountSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountSvcServer struct {
}

func (UnimplementedAccountSvcServer) GetByAccount(context.Context, *GetByAccountReq) (*GetByAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAccount not implemented")
}
func (UnimplementedAccountSvcServer) GetById(context.Context, *GetByIdReq) (*GetByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedAccountSvcServer) Create(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountSvcServer) Update(context.Context, *UpdateReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccountSvcServer) Delete(context.Context, *DeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountSvcServer) mustEmbedUnimplementedAccountSvcServer() {}

// UnsafeAccountSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountSvcServer will
// result in compilation errors.
type UnsafeAccountSvcServer interface {
	mustEmbedUnimplementedAccountSvcServer()
}

func RegisterAccountSvcServer(s grpc.ServiceRegistrar, srv AccountSvcServer) {
	s.RegisterService(&AccountSvc_ServiceDesc, srv)
}

func _AccountSvc_GetByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).GetByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountsvc.AccountSvc/GetByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).GetByAccount(ctx, req.(*GetByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountsvc.AccountSvc/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).GetById(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountsvc.AccountSvc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountsvc.AccountSvc/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountsvc.AccountSvc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountSvc_ServiceDesc is the grpc.ServiceDesc for AccountSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accountsvc.AccountSvc",
	HandlerType: (*AccountSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByAccount",
			Handler:    _AccountSvc_GetByAccount_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _AccountSvc_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AccountSvc_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccountSvc_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountSvc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accountsvc.proto",
}

// AccountLogSvcClient is the client API for AccountLogSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountLogSvcClient interface {
	InsertLog(ctx context.Context, in *InsertLogReq, opts ...grpc.CallOption) (*InsertLogResp, error)
	AccountLogList(ctx context.Context, in *AccountLogListReq, opts ...grpc.CallOption) (*AccountLogListResp, error)
}

type accountLogSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountLogSvcClient(cc grpc.ClientConnInterface) AccountLogSvcClient {
	return &accountLogSvcClient{cc}
}

func (c *accountLogSvcClient) InsertLog(ctx context.Context, in *InsertLogReq, opts ...grpc.CallOption) (*InsertLogResp, error) {
	out := new(InsertLogResp)
	err := c.cc.Invoke(ctx, "/accountsvc.AccountLogSvc/InsertLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountLogSvcClient) AccountLogList(ctx context.Context, in *AccountLogListReq, opts ...grpc.CallOption) (*AccountLogListResp, error) {
	out := new(AccountLogListResp)
	err := c.cc.Invoke(ctx, "/accountsvc.AccountLogSvc/AccountLogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountLogSvcServer is the server API for AccountLogSvc service.
// All implementations must embed UnimplementedAccountLogSvcServer
// for forward compatibility
type AccountLogSvcServer interface {
	InsertLog(context.Context, *InsertLogReq) (*InsertLogResp, error)
	AccountLogList(context.Context, *AccountLogListReq) (*AccountLogListResp, error)
	mustEmbedUnimplementedAccountLogSvcServer()
}

// UnimplementedAccountLogSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountLogSvcServer struct {
}

func (UnimplementedAccountLogSvcServer) InsertLog(context.Context, *InsertLogReq) (*InsertLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLog not implemented")
}
func (UnimplementedAccountLogSvcServer) AccountLogList(context.Context, *AccountLogListReq) (*AccountLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLogList not implemented")
}
func (UnimplementedAccountLogSvcServer) mustEmbedUnimplementedAccountLogSvcServer() {}

// UnsafeAccountLogSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountLogSvcServer will
// result in compilation errors.
type UnsafeAccountLogSvcServer interface {
	mustEmbedUnimplementedAccountLogSvcServer()
}

func RegisterAccountLogSvcServer(s grpc.ServiceRegistrar, srv AccountLogSvcServer) {
	s.RegisterService(&AccountLogSvc_ServiceDesc, srv)
}

func _AccountLogSvc_InsertLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountLogSvcServer).InsertLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountsvc.AccountLogSvc/InsertLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountLogSvcServer).InsertLog(ctx, req.(*InsertLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountLogSvc_AccountLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountLogSvcServer).AccountLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountsvc.AccountLogSvc/AccountLogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountLogSvcServer).AccountLogList(ctx, req.(*AccountLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountLogSvc_ServiceDesc is the grpc.ServiceDesc for AccountLogSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountLogSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accountsvc.AccountLogSvc",
	HandlerType: (*AccountLogSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertLog",
			Handler:    _AccountLogSvc_InsertLog_Handler,
		},
		{
			MethodName: "AccountLogList",
			Handler:    _AccountLogSvc_AccountLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accountsvc.proto",
}
