// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: accountsvc.proto

package accountsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Accountsvc_GetByAccount_FullMethodName = "/accountsvc.Accountsvc/GetByAccount"
	Accountsvc_GetById_FullMethodName      = "/accountsvc.Accountsvc/GetById"
	Accountsvc_Create_FullMethodName       = "/accountsvc.Accountsvc/Create"
	Accountsvc_Update_FullMethodName       = "/accountsvc.Accountsvc/Update"
	Accountsvc_Delete_FullMethodName       = "/accountsvc.Accountsvc/Delete"
)

// AccountsvcClient is the client API for Accountsvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsvcClient interface {
	GetByAccount(ctx context.Context, in *GetByAccountReq, opts ...grpc.CallOption) (*GetByAccountResp, error)
	GetById(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*GetByIdResp, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
}

type accountsvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsvcClient(cc grpc.ClientConnInterface) AccountsvcClient {
	return &accountsvcClient{cc}
}

func (c *accountsvcClient) GetByAccount(ctx context.Context, in *GetByAccountReq, opts ...grpc.CallOption) (*GetByAccountResp, error) {
	out := new(GetByAccountResp)
	err := c.cc.Invoke(ctx, Accountsvc_GetByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsvcClient) GetById(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*GetByIdResp, error) {
	out := new(GetByIdResp)
	err := c.cc.Invoke(ctx, Accountsvc_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsvcClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Accountsvc_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsvcClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, Accountsvc_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsvcClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, Accountsvc_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsvcServer is the server API for Accountsvc service.
// All implementations must embed UnimplementedAccountsvcServer
// for forward compatibility
type AccountsvcServer interface {
	GetByAccount(context.Context, *GetByAccountReq) (*GetByAccountResp, error)
	GetById(context.Context, *GetByIdReq) (*GetByIdResp, error)
	Create(context.Context, *CreateReq) (*CreateResp, error)
	Update(context.Context, *UpdateReq) (*UpdateResp, error)
	Delete(context.Context, *DeleteReq) (*DeleteResp, error)
	mustEmbedUnimplementedAccountsvcServer()
}

// UnimplementedAccountsvcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsvcServer struct {
}

func (UnimplementedAccountsvcServer) GetByAccount(context.Context, *GetByAccountReq) (*GetByAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAccount not implemented")
}
func (UnimplementedAccountsvcServer) GetById(context.Context, *GetByIdReq) (*GetByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedAccountsvcServer) Create(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountsvcServer) Update(context.Context, *UpdateReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccountsvcServer) Delete(context.Context, *DeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountsvcServer) mustEmbedUnimplementedAccountsvcServer() {}

// UnsafeAccountsvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsvcServer will
// result in compilation errors.
type UnsafeAccountsvcServer interface {
	mustEmbedUnimplementedAccountsvcServer()
}

func RegisterAccountsvcServer(s grpc.ServiceRegistrar, srv AccountsvcServer) {
	s.RegisterService(&Accountsvc_ServiceDesc, srv)
}

func _Accountsvc_GetByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsvcServer).GetByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountsvc_GetByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsvcServer).GetByAccount(ctx, req.(*GetByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accountsvc_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsvcServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountsvc_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsvcServer).GetById(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accountsvc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsvcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountsvc_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsvcServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accountsvc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsvcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountsvc_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsvcServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accountsvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountsvc_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsvcServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Accountsvc_ServiceDesc is the grpc.ServiceDesc for Accountsvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accountsvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accountsvc.Accountsvc",
	HandlerType: (*AccountsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByAccount",
			Handler:    _Accountsvc_GetByAccount_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Accountsvc_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Accountsvc_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Accountsvc_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Accountsvc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accountsvc.proto",
}
