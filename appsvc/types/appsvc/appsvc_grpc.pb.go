// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: appsvc.proto

package appsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppsvcClient is the client API for Appsvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppsvcClient interface {
	GetAppById(ctx context.Context, in *GetAppByIdReq, opts ...grpc.CallOption) (*GetAppByIdResp, error)
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error)
	AppList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*AppListResp, error)
}

type appsvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAppsvcClient(cc grpc.ClientConnInterface) AppsvcClient {
	return &appsvcClient{cc}
}

func (c *appsvcClient) GetAppById(ctx context.Context, in *GetAppByIdReq, opts ...grpc.CallOption) (*GetAppByIdResp, error) {
	out := new(GetAppByIdResp)
	err := c.cc.Invoke(ctx, "/appsvc.Appsvc/GetAppById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsvcClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error) {
	out := new(CreateAppResp)
	err := c.cc.Invoke(ctx, "/appsvc.Appsvc/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsvcClient) AppList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*AppListResp, error) {
	out := new(AppListResp)
	err := c.cc.Invoke(ctx, "/appsvc.Appsvc/AppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppsvcServer is the server API for Appsvc service.
// All implementations must embed UnimplementedAppsvcServer
// for forward compatibility
type AppsvcServer interface {
	GetAppById(context.Context, *GetAppByIdReq) (*GetAppByIdResp, error)
	CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error)
	AppList(context.Context, *AppListReq) (*AppListResp, error)
	mustEmbedUnimplementedAppsvcServer()
}

// UnimplementedAppsvcServer must be embedded to have forward compatible implementations.
type UnimplementedAppsvcServer struct {
}

func (UnimplementedAppsvcServer) GetAppById(context.Context, *GetAppByIdReq) (*GetAppByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppById not implemented")
}
func (UnimplementedAppsvcServer) CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAppsvcServer) AppList(context.Context, *AppListReq) (*AppListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppList not implemented")
}
func (UnimplementedAppsvcServer) mustEmbedUnimplementedAppsvcServer() {}

// UnsafeAppsvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppsvcServer will
// result in compilation errors.
type UnsafeAppsvcServer interface {
	mustEmbedUnimplementedAppsvcServer()
}

func RegisterAppsvcServer(s grpc.ServiceRegistrar, srv AppsvcServer) {
	s.RegisterService(&Appsvc_ServiceDesc, srv)
}

func _Appsvc_GetAppById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsvcServer).GetAppById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsvc.Appsvc/GetAppById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsvcServer).GetAppById(ctx, req.(*GetAppByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appsvc_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsvcServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsvc.Appsvc/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsvcServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appsvc_AppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsvcServer).AppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsvc.Appsvc/AppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsvcServer).AppList(ctx, req.(*AppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Appsvc_ServiceDesc is the grpc.ServiceDesc for Appsvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Appsvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appsvc.Appsvc",
	HandlerType: (*AppsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppById",
			Handler:    _Appsvc_GetAppById_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _Appsvc_CreateApp_Handler,
		},
		{
			MethodName: "AppList",
			Handler:    _Appsvc_AppList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appsvc.proto",
}

// SendLogsvcClient is the client API for SendLogsvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendLogsvcClient interface {
	InsertLog(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	SendLogList(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type sendLogsvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSendLogsvcClient(cc grpc.ClientConnInterface) SendLogsvcClient {
	return &sendLogsvcClient{cc}
}

func (c *sendLogsvcClient) InsertLog(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/appsvc.SendLogsvc/InsertLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendLogsvcClient) SendLogList(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/appsvc.SendLogsvc/SendLogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendLogsvcServer is the server API for SendLogsvc service.
// All implementations must embed UnimplementedSendLogsvcServer
// for forward compatibility
type SendLogsvcServer interface {
	InsertLog(context.Context, *Req) (*Resp, error)
	SendLogList(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedSendLogsvcServer()
}

// UnimplementedSendLogsvcServer must be embedded to have forward compatible implementations.
type UnimplementedSendLogsvcServer struct {
}

func (UnimplementedSendLogsvcServer) InsertLog(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLog not implemented")
}
func (UnimplementedSendLogsvcServer) SendLogList(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLogList not implemented")
}
func (UnimplementedSendLogsvcServer) mustEmbedUnimplementedSendLogsvcServer() {}

// UnsafeSendLogsvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendLogsvcServer will
// result in compilation errors.
type UnsafeSendLogsvcServer interface {
	mustEmbedUnimplementedSendLogsvcServer()
}

func RegisterSendLogsvcServer(s grpc.ServiceRegistrar, srv SendLogsvcServer) {
	s.RegisterService(&SendLogsvc_ServiceDesc, srv)
}

func _SendLogsvc_InsertLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendLogsvcServer).InsertLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsvc.SendLogsvc/InsertLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendLogsvcServer).InsertLog(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendLogsvc_SendLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendLogsvcServer).SendLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsvc.SendLogsvc/SendLogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendLogsvcServer).SendLogList(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// SendLogsvc_ServiceDesc is the grpc.ServiceDesc for SendLogsvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendLogsvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appsvc.SendLogsvc",
	HandlerType: (*SendLogsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertLog",
			Handler:    _SendLogsvc_InsertLog_Handler,
		},
		{
			MethodName: "SendLogList",
			Handler:    _SendLogsvc_SendLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appsvc.proto",
}

// AppChannelClient is the client API for AppChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppChannelClient interface {
	CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*CreateChannelResp, error)
	GetChannelById(ctx context.Context, in *GetChannelByIdReq, opts ...grpc.CallOption) (*GetChannelByIdResp, error)
	ChannelList(ctx context.Context, in *ChannelListReq, opts ...grpc.CallOption) (*ChannelListResp, error)
}

type appChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewAppChannelClient(cc grpc.ClientConnInterface) AppChannelClient {
	return &appChannelClient{cc}
}

func (c *appChannelClient) CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*CreateChannelResp, error) {
	out := new(CreateChannelResp)
	err := c.cc.Invoke(ctx, "/appsvc.AppChannel/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appChannelClient) GetChannelById(ctx context.Context, in *GetChannelByIdReq, opts ...grpc.CallOption) (*GetChannelByIdResp, error) {
	out := new(GetChannelByIdResp)
	err := c.cc.Invoke(ctx, "/appsvc.AppChannel/GetChannelById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appChannelClient) ChannelList(ctx context.Context, in *ChannelListReq, opts ...grpc.CallOption) (*ChannelListResp, error) {
	out := new(ChannelListResp)
	err := c.cc.Invoke(ctx, "/appsvc.AppChannel/ChannelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppChannelServer is the server API for AppChannel service.
// All implementations must embed UnimplementedAppChannelServer
// for forward compatibility
type AppChannelServer interface {
	CreateChannel(context.Context, *CreateChannelReq) (*CreateChannelResp, error)
	GetChannelById(context.Context, *GetChannelByIdReq) (*GetChannelByIdResp, error)
	ChannelList(context.Context, *ChannelListReq) (*ChannelListResp, error)
	mustEmbedUnimplementedAppChannelServer()
}

// UnimplementedAppChannelServer must be embedded to have forward compatible implementations.
type UnimplementedAppChannelServer struct {
}

func (UnimplementedAppChannelServer) CreateChannel(context.Context, *CreateChannelReq) (*CreateChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedAppChannelServer) GetChannelById(context.Context, *GetChannelByIdReq) (*GetChannelByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelById not implemented")
}
func (UnimplementedAppChannelServer) ChannelList(context.Context, *ChannelListReq) (*ChannelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelList not implemented")
}
func (UnimplementedAppChannelServer) mustEmbedUnimplementedAppChannelServer() {}

// UnsafeAppChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppChannelServer will
// result in compilation errors.
type UnsafeAppChannelServer interface {
	mustEmbedUnimplementedAppChannelServer()
}

func RegisterAppChannelServer(s grpc.ServiceRegistrar, srv AppChannelServer) {
	s.RegisterService(&AppChannel_ServiceDesc, srv)
}

func _AppChannel_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppChannelServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsvc.AppChannel/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppChannelServer).CreateChannel(ctx, req.(*CreateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppChannel_GetChannelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppChannelServer).GetChannelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsvc.AppChannel/GetChannelById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppChannelServer).GetChannelById(ctx, req.(*GetChannelByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppChannel_ChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppChannelServer).ChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsvc.AppChannel/ChannelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppChannelServer).ChannelList(ctx, req.(*ChannelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppChannel_ServiceDesc is the grpc.ServiceDesc for AppChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appsvc.AppChannel",
	HandlerType: (*AppChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _AppChannel_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannelById",
			Handler:    _AppChannel_GetChannelById_Handler,
		},
		{
			MethodName: "ChannelList",
			Handler:    _AppChannel_ChannelList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appsvc.proto",
}
