// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: appsvc.proto

package appsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Appsvc_GetApp_FullMethodName    = "/appsvc.Appsvc/GetApp"
	Appsvc_CreateApp_FullMethodName = "/appsvc.Appsvc/CreateApp"
)

// AppsvcClient is the client API for Appsvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppsvcClient interface {
	GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*GetAppResp, error)
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error)
}

type appsvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAppsvcClient(cc grpc.ClientConnInterface) AppsvcClient {
	return &appsvcClient{cc}
}

func (c *appsvcClient) GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*GetAppResp, error) {
	out := new(GetAppResp)
	err := c.cc.Invoke(ctx, Appsvc_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsvcClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error) {
	out := new(CreateAppResp)
	err := c.cc.Invoke(ctx, Appsvc_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppsvcServer is the server API for Appsvc service.
// All implementations must embed UnimplementedAppsvcServer
// for forward compatibility
type AppsvcServer interface {
	GetApp(context.Context, *GetAppReq) (*GetAppResp, error)
	CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error)
	mustEmbedUnimplementedAppsvcServer()
}

// UnimplementedAppsvcServer must be embedded to have forward compatible implementations.
type UnimplementedAppsvcServer struct {
}

func (UnimplementedAppsvcServer) GetApp(context.Context, *GetAppReq) (*GetAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedAppsvcServer) CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAppsvcServer) mustEmbedUnimplementedAppsvcServer() {}

// UnsafeAppsvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppsvcServer will
// result in compilation errors.
type UnsafeAppsvcServer interface {
	mustEmbedUnimplementedAppsvcServer()
}

func RegisterAppsvcServer(s grpc.ServiceRegistrar, srv AppsvcServer) {
	s.RegisterService(&Appsvc_ServiceDesc, srv)
}

func _Appsvc_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsvcServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appsvc_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsvcServer).GetApp(ctx, req.(*GetAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appsvc_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsvcServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appsvc_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsvcServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Appsvc_ServiceDesc is the grpc.ServiceDesc for Appsvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Appsvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appsvc.Appsvc",
	HandlerType: (*AppsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApp",
			Handler:    _Appsvc_GetApp_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _Appsvc_CreateApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appsvc.proto",
}
