syntax = "proto3";

package appsvc;
option go_package="./appsvc";

message App {
  int64 app_id = 1;
  string name = 2;
  string secret = 3;
  int32 status = 4;
  string remark = 5;
  int64 account_id = 6;
  int64 created_at = 7;
  int64 updated_at = 8;
}
message GetAppByIdReq {
  int64 app_id = 1;
}
message GetAppByIdResp {
  App data = 1;
}
message CreateAppReq {
  int64 account_id = 1;
  int64 service_id = 2;
  string name = 3;
}

message CreateAppResp {
  int64 id  = 1;
}
message AppListReq {
  int64 account_id = 1;
  int64 status = 2;
  int64 id =  3;
  int64 created_lt = 4;
  int64 created_gt = 5;
  string name = 6;
  int64 page =  7;
  int64 page_size = 8;
}
message AppListResp {
  repeated App list = 1;
  int64 total = 2;
}

service Appsvc {
  rpc GetAppById(GetAppByIdReq) returns(GetAppByIdResp);
  rpc CreateApp(CreateAppReq) returns(CreateAppResp);
  rpc AppList(AppListReq) returns(AppListResp);
}

message Req{}
message Resp{}
service SendLogsvc {
  rpc InsertLog(Req)returns(Resp);
  rpc SendLogList(Req)returns(Resp);
}

message Channel {
  int64 id =  1;
  string  channel_name = 2;
  string  channel_type  = 3;
  string  channel_key  = 4;
  string  channel_secret  = 5;
  string  channel_domain  = 6;
  string  ext_properties  = 7;
  string  status  = 8;
  string  send_order  = 9;
  int64 created_at = 10;
  int64 updated_at = 11;
  int64 quota = 12;
  int64 is_default = 13;
}

message ChannelListReq {}
message ChannelListResp{
  repeated Channel list = 1;
  int64 total = 2;
}
message GetChannelByIdReq {
  int64 app_id = 1;
}
message GetChannelByIdResp {
  Channel data = 1;
}
message CreateChannelReq {
  string name = 1;
  string app_id = 2;
  string secret = 3;
  string gateway = 4;
  int32 is_default=5;
}
message CreateChannelResp {
  int64 id = 1;
}
service AppChannel {
  rpc CreateChannel(CreateChannelReq) returns (CreateChannelResp);
  rpc GetChannelById(GetChannelByIdReq) returns (GetChannelByIdResp);
  rpc ChannelList(ChannelListReq) returns(ChannelListResp);
}